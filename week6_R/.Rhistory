print("This is a code block!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/aliceeeee/Desktop/Spring23/QBIO490/qbio_490_alice"))
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
## Create a new variable my_var to store anything you choose:
my_var-< 5
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
## Create a new variable my_var to store anything you choose:
my_var<- 5
print(my_var)
## add code here!
name<-'A'
age <- 5
birthday<- "07/01/2000"
three_fav_colors<-c(white, black, grey)
## add code here!
name<-'A'
age <- 5
birthday<- "07/01/2000"
three_fav_colors<-c('white', 'black', 'grey')
print(name)
print(age)
print(birthday)
print(three_fav_colors)
## add code here!
name<-'A'
age <- 5
birthday<- 07/01/2000
three_fav_colors<-c('white', 'black', 'grey')
print(name) #charcter
print(age) #numebr
print(birthday) #string
print(three_fav_colors)
## add code here!
name<-'A'
age <- 5
birthday<- "07/01/2000"
three_fav_colors<-c('white', 'black', 'grey')
print(name) #charcter
print(age) #numebr
print(birthday) #string
print(three_fav_colors)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
"cat" == "cat" & "dog" == "dog" # prediction:
"cat" == "cat" & "fish" == "hamster" # prediction:
1 < 2 | 3 < 1 # prediction:
1 < 2 | 3 < 5 # prediction:
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction: true, false,true, true, false
if (1>2) {
# action
print("False")
} else if (1<2) {
# action
print("Success!")
} else {
# action
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
mean++
# do something
# update condition
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
mean++
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
mean+1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x+1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x=x+1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x= x + 1
}
i = 1
while (i < 10) {
print(i)
i = i + 2
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x= x + 1
print(x)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x= x + 1
mean <- mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x= x + 1
mean=mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean<=10) {
print(mean)
x= x + 1
print(my_list)
print(mean)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while ((11+x)/3<=10) {
print((11+x)/3)
x= x + 1
}
list <- c(1, 5, 20, 0)
for (i in list){
print(i)
}
# write loop here
# write loop here
for (i in -7:7){
print(i)
}
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
data(mtcars)
View(mtcars)
# call functions here
colnames()
# call functions here
colnames(mtcars)
rownames(mtcars)
mtcars$ # fill in name of carburetor column here
# call functions here
colnames(mtcars)
rownames(mtcars)
mtcars$colnames()# fill in name of carburetor column here
# call functions here
colnames(mtcars)
rownames(mtcars)
mtcars$cyl# fill in name of carburetor column here
mtcars[2, 4] # access the value from the second row, fourth column (this is the horsepower of a Mazda RX4 Wag)
mtcars[1, ] # access all values in the first row (all info on the Mazda RX4)
mtcars[ , 1] # access all values in the first column (mpg info for all cars)
mtcars[1:5, c(1, 4, 6)] # rows one through five and columns 1, 4, and 6
mtcars[-(3:30), ] # access everything EXCEPT rows 3 through 30
mtcars[ , c(-(1:4), -6)] # access everything EXCEPT columns 1 through 4 and column 6
# write code here
rownames(mtcars)
colnames(mtcars)
# write code here
rownames(mtcars)
colnames(mtcars)
mtcars[7, 4]
mtcars[16, 4]
mtcars[31, 4]
# write code here
mtcars$transmission<- ifelse(am==0,"automatic","manual")
# write code here
mtcars$transmission<- ifelse([,9]==0,"automatic","manual")
# write code here
mtcars$transmission<- ifelse(mtcars$am==0,"automatic","manual")
View(mtcars)
# write code here
mtcars_copy<-mtcars[,c(9)]
# write code here
mtcars_copy<-mtcars.frame[,c(9)]
# write code here
data(mtcars_copy)<-mtcars[,c(9)]
# write code here
mtcars_copy<-mtcars[,c(9)]
# write code here
data(mtcars_copy)
# write code here
data(mtcars_copy)
# write code here
mtcars_copy<-mtcars.frame[,c(9)]
# write code here
mtcars_copy<-mtcars
# write code here
mtcars_copy<-mtcars[,-9]
View(mtcars_copy)
# write code here
# write code here
help("is.na")
